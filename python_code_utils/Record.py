# -*- coding: utf-8 -*-
"""
This script reads audio data from a serial port, buffers it, and saves it
as overlapping .wav files. It's designed to continuously capture audio
in segments of a specified duration with a defined overlap.
"""
import serial
import numpy as np
import wave
from datetime import datetime
from collections import deque
import time
import os
import sys

# === CONFIGURATION ==========================================================
# --- Serial Port Settings ---
SERIAL_PORT = 'COM3'  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
BAUD_RATE = 500000     # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Baud Rate ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

# --- Audio Settings ---
SAMPLE_RATE = 22050    # 16,000 samples per second
CHANNELS = 1           # Mono audio
SAMPLE_WIDTH = 2       # 2 bytes per sample (for 16-bit audio)

# --- Recording Loop Settings ---
BLOCK_SIZE = 512       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô sample ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# --- File Saving Settings ---
WINDOW_DURATION = 2 # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
STEP_DURATION = 1.0    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

#============================================================================

OUTPUT_DIRECTORY = r"record\normal"
NAME_COMPONENT= "environment"  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á component ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å


# === DERIVED CONSTANTS (DO NOT CHANGE) ======================================
# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
BLOCK_DURATION_MS = (BLOCK_SIZE / SAMPLE_RATE) * 1000
WINDOW_SIZE_SAMPLES = int(SAMPLE_RATE * WINDOW_DURATION)
STEP_SIZE_SAMPLES = int(SAMPLE_RATE * STEP_DURATION)
# ============================================================================

def create_output_directory(directory_path):
    """
    Checks if the output directory exists and creates it if it doesn't.
    """
    if not os.path.exists(directory_path):
        try:
            os.makedirs(directory_path)
            print(f"üìÅ Created directory: {directory_path}")
        except OSError as e:
            print(f"‚ùå Error creating directory {directory_path}: {e}", file=sys.stderr)
            sys.exit(1)

def save_wave_file(filepath, audio_data, sample_rate, sample_width, channels):
    """
    Saves the provided audio data to a .wav file.

    Args:
        filepath (str): The full path to the output .wav file.
        audio_data (bytes): The raw audio data to save.
        sample_rate (int): The sample rate of the audio.
        sample_width (int): The sample width in bytes (e.g., 2 for 16-bit).
        channels (int): The number of audio channels (e.g., 1 for mono).
    """
    try:
        with wave.open(filepath, 'w') as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(sample_width)
            wf.setframerate(sample_rate)
            wf.writeframes(audio_data)
    except Exception as e:
        print(f"‚ùå Error saving file {filepath}: {e}", file=sys.stderr)

def main():
    """
    Main function to connect to the serial port, read audio data,
    and save it to files.
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
    create_output_directory(OUTPUT_DIRECTORY)

    ser = None  # Initialize ser to None
    try:
        # --- Connect to Serial Port ---
        print(f"üîå Connecting to serial port {SERIAL_PORT} at {BAUD_RATE} baud...")
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=STEP_DURATION)
        print("‚úÖ Connection successful.")
        # Flush any old data in the input buffer
        ser.flushInput()

    except serial.SerialException as e:
        print(f"‚ùå Critical Error: Could not open serial port {SERIAL_PORT}. {e}", file=sys.stderr)
        print("Please check the port name, permissions, and ensure no other program is using it.")
        sys.exit(1)

    # --- Initialize Buffers and Counters ---
    # ‡πÉ‡∏ä‡πâ deque ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô buffer ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    audio_buffer = deque(maxlen=WINDOW_SIZE_SAMPLES)
    new_samples_counter = 0
    file_counter = 0

    print("\n" + "="*50)
    print(f"üéôÔ∏è  Listening and saving {WINDOW_DURATION}-second .wav files every {STEP_DURATION} second.")
    print(f"    (Overlap = {WINDOW_DURATION - STEP_DURATION} sec, Window size = {WINDOW_SIZE_SAMPLES} samples)")
    print("    Press Ctrl+C to stop.")
    print("="*50 + "\n")

    try:
        while True:
            # 1) ‡∏´‡∏≤ header 0xAA55
            b1 = ser.read(1)
            if not b1 or b1[0] != 0xAA:
                continue
            b2 = ser.read(1)
            if not b2 or b2[0] != 0x55:
                continue

            # 2) ‡∏≠‡πà‡∏≤‡∏ô PCM data ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î BLOCK_SIZE*2 = 1024 ‡πÑ‡∏ö‡∏ï‡πå
            packet_bytes = BLOCK_SIZE * SAMPLE_WIDTH  # 512 * 2
            raw = ser.read(packet_bytes)
            if len(raw) < packet_bytes:
                # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡∏Ç‡πâ‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß sync ‡πÉ‡∏´‡∏°‡πà
                continue

            # 3) ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int16 array
            samples = np.frombuffer(raw, dtype=np.int16)

            # 4) ‡πÄ‡∏ï‡∏¥‡∏° buffer ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö sample
            audio_buffer.extend(samples)
            new_samples_counter += len(samples)

            # 5) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if new_samples_counter >= STEP_SIZE_SAMPLES and len(audio_buffer) >= WINDOW_SIZE_SAMPLES:
                new_samples_counter %= STEP_SIZE_SAMPLES

                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á 1 window ‡πÄ‡∏ï‡πá‡∏°
                window_data = np.array(audio_buffer)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô .wav
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
                filename = f"{NAME_COMPONENT}_{timestamp}.wav"
                filepath = os.path.join(OUTPUT_DIRECTORY, filename)
                save_wave_file(filepath, window_data.tobytes(),
                            SAMPLE_RATE, SAMPLE_WIDTH, CHANNELS)

                file_counter += 1
                print(f"‚úÖ [{file_counter}] Saved: {filename}")

    except KeyboardInterrupt:
        print("\nüõë User pressed Ctrl+C. Shutting down gracefully.")
    except Exception as e:
        print(f"\n‚ùå An unexpected error occurred: {e}", file=sys.stderr)
    finally:
        # --- Cleanup ---
        if ser and ser.is_open:
            ser.close()
            print("üîå Serial port closed.")
        print("üëã Program finished.")


if __name__ == "__main__":
    main()
